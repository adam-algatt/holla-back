{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adam\\\\repos\\\\codeschool\\\\projects\\\\udemy\\\\react\\\\holla-back\\\\client\\\\src\\\\components\\\\misc\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from '../../hooks/useChatContext';\nimport { useAuthContext } from '../../hooks/useAuthContext';\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { getSender, getSenderProfile } from '../../config/ChatLogic';\nimport ProfileModal from './ProfileModal';\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const {\n    selectedChat,\n    setSelectedChat\n  } = useChatContext();\n  const {\n    user\n  } = useAuthContext();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  //returns other users name as chat title when clicking on a one-to-one \n  // chat\n  const getOtherUser = () => selectedChat.users[0].name === user.name ? selectedChat.users[1].name : selectedChat.users[0].name;\n  const SendMessage = async e => {\n    console.log(e.key);\n    if (e.key === 'Enter') {\n      setLoading(true);\n      try {\n        let param = {\n          chatId: selectedChat._id,\n          content: newMessage\n        };\n        const response = await fetch(`/api/message`, {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json',\n            'Authorization': `Bearer ${user.token}`\n          },\n          body: JSON.stringify(param)\n        });\n        const json = await response.json();\n        console.log(json);\n        setNewMessage('');\n        setMessages(prev => [...prev, response]);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        toast({\n          title: 'Failed to send message',\n          description: error.response.data,\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n          position: 'bottom'\n        });\n      }\n    }\n  };\n  const messageHandler = e => {\n    // console.log(key)\n    setNewMessage(e.target.value);\n\n    // typing indicator \n  };\n\n  const getAllMessages = async () => {\n    const response = await fetch(`/api/message/${user._id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n  };\n  useEffect(() => {\n    getAllMessages();\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: 'flex',\n            md: 'none'\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this),\n          onClick: () => setSelectedChat('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderProfile(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal\n          // fetchMessages={fetchMessages}\n          , {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        p: 3,\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        bg: \"#E8E8E8\",\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"x1\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: SendMessage,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message\",\n            onChange: messageHandler,\n            value: newMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3x1\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a User to Start Chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"BWRdk99avFXxrX6G2HxFH4kuHFE=\", false, function () {\n  return [useChatContext, useAuthContext, useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useState","useEffect","useChatContext","useAuthContext","Box","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderProfile","ProfileModal","UpdateGroupChatModal","SingleChat","fetchAgain","setFetchAgain","selectedChat","setSelectedChat","user","messages","setMessages","newMessage","setNewMessage","loading","setLoading","toast","getOtherUser","users","name","SendMessage","e","console","log","key","param","chatId","_id","content","response","fetch","method","headers","token","body","JSON","stringify","json","prev","error","title","description","data","status","duration","isClosable","position","messageHandler","target","value","getAllMessages","base","md","isGroupChat","chatName","toUpperCase"],"sources":["C:/Users/Adam/repos/codeschool/projects/udemy/react/holla-back/client/src/components/misc/SingleChat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useChatContext } from '../../hooks/useChatContext';\r\nimport { useAuthContext } from '../../hooks/useAuthContext';\r\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { getSender, getSenderProfile } from '../../config/ChatLogic';\r\nimport  ProfileModal from './ProfileModal';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const { selectedChat, setSelectedChat } = useChatContext();\r\n    const { user } = useAuthContext()\r\n    const [messages, setMessages] = useState([])\r\n    const [newMessage, setNewMessage] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    \r\n    const toast = useToast(); \r\n    //returns other users name as chat title when clicking on a one-to-one \r\n    // chat\r\n    const getOtherUser = () => selectedChat.users[0].name === user.name ? selectedChat.users[1].name : selectedChat.users[0].name\r\n    const SendMessage = async(e) => {\r\n      console.log(e.key)\r\n      if (e.key === 'Enter') {\r\n        setLoading(true)\r\n        try {\r\n\r\n          let param = {\r\n            chatId: selectedChat._id,\r\n            content: newMessage,\r\n          };\r\n\r\n            const response = await fetch(`/api/message`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `Bearer ${user.token}`,\r\n              },\r\n              body: JSON.stringify(param)\r\n            }) \r\n            const json = await response.json(); \r\n\r\n            console.log(json)\r\n            setNewMessage('')\r\n            setMessages((prev => [...prev, response]))\r\n            setLoading(false)\r\n        } catch (error) {\r\n          console.log(error)\r\n          toast({\r\n            title: 'Failed to send message',\r\n            description: error.response.data,\r\n            status: 'error',\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: 'bottom'\r\n          })\r\n        }\r\n    }\r\n  \r\n    }\r\n\r\n        const  messageHandler = (e) => {\r\n          // console.log(key)\r\n          setNewMessage(e.target.value);\r\n         \r\n          // typing indicator \r\n\r\n    }\r\n\r\n    const getAllMessages = async() => {\r\n\r\n      const response = await fetch(`/api/message/${user._id}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n        },\r\n      }) \r\n      const json = await response.json(); \r\n      console.log(json)\r\n    }\r\n\r\n    useEffect(() => {\r\n     getAllMessages()\r\n    }, [messages]);\r\n    \r\n    return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n\r\n        <Text\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        pb={3}\r\n        px={2}\r\n        w=\"100%\"\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        justifyContent={{ base: \"space-between\" }}\r\n        alignItems=\"center\"\r\n        >\r\n        {/* left arrow to show MyChats component */}\r\n        <IconButton \r\n        display={{base: 'flex', md: 'none'}}\r\n        icon={<ArrowBackIcon/>}\r\n        onClick={() => setSelectedChat('')}\r\n        />\r\n\r\n        {(!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderProfile(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    // fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n          fontSize={{ base: \"28px\", md: \"30px\" }}\r\n          p={3}\r\n          w=\"100%\"\r\n          h='100%'\r\n          borderRadius='lg'\r\n          bg='#E8E8E8'\r\n          display=\"flex\"\r\n          flexDir='column'\r\n          justifyContent=\"flex-end\"\r\n          >\r\n                        {loading ? (<Spinner \r\n                        size='x1'  \r\n                        w={20}\r\n                        h={20}\r\n                        alignSelf='center'\r\n                        margin='auto'\r\n                        />  )\r\n                        : \r\n                        (\r\n                          <div>messages</div>\r\n                          )}\r\n          <FormControl onKeyDown={SendMessage}>\r\n          {/* <FormControl> */}\r\n              <Input\r\n                variant='filled'\r\n                bg='#E0E0E0'\r\n                placeholder='Enter a message'\r\n                onChange={messageHandler}\r\n                value={newMessage}\r\n              />\r\n\r\n           \r\n          </FormControl>\r\n          </Box>\r\n          </>\r\n      ) : (\r\n        <Box display='flex' alignItems='center' justifyContent='center' h='100%'>\r\n            <Text fontSize='3x1' pb={3} fontFamily='Work sans'>\r\n              Click on a User to Start Chatting\r\n\r\n            </Text>\r\n        </Box>\r\n\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleChat\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}