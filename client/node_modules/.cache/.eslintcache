[{"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\index.js":"1","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\App.js":"2","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\context\\AuthContext.js":"3","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\context\\ChatContext.js":"4","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\pages\\Home.js":"5","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\pages\\Chats.js":"6","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useAuthContext.js":"7","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\authentication\\Signup.js":"8","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\authentication\\Login.js":"9","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ChatBox.js":"10","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\SideDrawer.js":"11","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\MyChats.js":"12","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useSignup.js":"13","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\SingleChat.js":"14","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useLogin.js":"15","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useChatContext.js":"16","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ChatLoading.js":"17","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useLogout.js":"18","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UserListItem.js":"19","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ProfileModal.js":"20","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\GroupChatModal.js":"21","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\config\\ChatLogic.js":"22","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UserBadgeItem.js":"23","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UpdateGroupChatModal.js":"24","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ScrollableChat.js":"25"},{"size":825,"mtime":1674250660996,"results":"26","hashOfConfig":"27"},{"size":355,"mtime":1673496187048,"results":"28","hashOfConfig":"27"},{"size":1018,"mtime":1673551902193,"results":"29","hashOfConfig":"27"},{"size":780,"mtime":1673634829821,"results":"30","hashOfConfig":"27"},{"size":1269,"mtime":1673480109727,"results":"31","hashOfConfig":"27"},{"size":934,"mtime":1673986546484,"results":"32","hashOfConfig":"27"},{"size":314,"mtime":1673478273027,"results":"33","hashOfConfig":"27"},{"size":5515,"mtime":1673483582651,"results":"34","hashOfConfig":"27"},{"size":3246,"mtime":1673989199674,"results":"35","hashOfConfig":"27"},{"size":683,"mtime":1673994039726,"results":"36","hashOfConfig":"27"},{"size":5037,"mtime":1674010995350,"results":"37","hashOfConfig":"27"},{"size":3667,"mtime":1674249913978,"results":"38","hashOfConfig":"27"},{"size":1016,"mtime":1673483058210,"results":"39","hashOfConfig":"27"},{"size":5863,"mtime":1674251394446,"results":"40","hashOfConfig":"27"},{"size":1193,"mtime":1673481241321,"results":"41","hashOfConfig":"27"},{"size":314,"mtime":1673631784583,"results":"42","hashOfConfig":"27"},{"size":510,"mtime":1673563809354,"results":"43","hashOfConfig":"27"},{"size":327,"mtime":1673495997154,"results":"44","hashOfConfig":"27"},{"size":908,"mtime":1673725903382,"results":"45","hashOfConfig":"27"},{"size":1835,"mtime":1673556718025,"results":"46","hashOfConfig":"27"},{"size":5577,"mtime":1674249881706,"results":"47","hashOfConfig":"27"},{"size":258,"mtime":1673989814333,"results":"48","hashOfConfig":"27"},{"size":765,"mtime":1673995895059,"results":"49","hashOfConfig":"27"},{"size":9167,"mtime":1674251055893,"results":"50","hashOfConfig":"27"},{"size":0,"mtime":1674251370445,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"onr1cp",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"57"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"57"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\index.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\App.js",["113"],"import './App.css';\nimport { Button } from '@chakra-ui/react';\nimport { Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Chats from './pages/Chats';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Route path='/' component={Home} exact/> \n<Route path='/chat' component={Chats} exact/>\n    </div>\n  );\n}\n\nexport default App;\n",["114","115"],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\context\\ChatContext.js",["116","117"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  const history = useHistory();\r\n\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\pages\\Home.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\pages\\Chats.js",["118","119","120","121","122","123","124","125","126"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport ChatBox from '../components/misc/ChatBox';\r\nimport MyChats from '../components/misc/MyChats';\r\nimport SideDrawer from '../components/misc/SideDrawer';\r\nimport { Container, Box, Text, Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\n\r\nconst Chats = () => {\r\n  const {user} = useAuthContext()\r\nconst [fetchAgain, setFetchAgain] = useState(false);\r\n\r\n  console.log('chats component running')\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n {user && <SideDrawer/>}\r\n <Box \r\n display='flex'\r\n justifyContent='space-between'\r\n w='100%'\r\n h='91.5vh'\r\n p='10px'>\r\n  {user && <MyChats fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}/>}  \r\n  {user && <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}/>}\r\n\r\n </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chats\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useAuthContext.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\authentication\\Signup.js",["127","128","129","130","131"],"import { FormLabel, FormControl} from '@chakra-ui/form-control'\r\nimport { VStack } from '@chakra-ui/layout'\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\r\nimport { Button, useToast } from '@chakra-ui/react'\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { useSignup } from \"../../hooks/useSignup\"\r\n\r\nconst Signup = () => {\r\nconst [ show, setShow] = useState(false); \r\nconst [ name, setName] = useState(''); \r\nconst [ email, setEmail] = useState(''); \r\nconst [ confirmPassword, setConfirmPassword] = useState(''); \r\nconst [ password, setPassword] = useState(''); \r\nconst [ avatar, setAvatar] = useState('');     \r\nconst {signup, error, loading} = useSignup()\r\n\r\nconst toast = useToast(); \r\n\r\nconst postDetails = (pics) => {\r\n  if (pics === undefined) {\r\n    toast({\r\n      title: \"Please Select an Image!\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    return;\r\n  }\r\n  // gen new form data containing cloudinary info\r\n  // make a post request to cloudinary with avatar\r\n  // store response containing cloudinary hosted img url to avatar state\r\n  if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n    const data = new FormData();\r\n    data.append(\"file\", pics);\r\n    data.append(\"upload_preset\", \"holla-back\");\r\n    data.append(\"cloud_name\", \"duyk43vpx\");\r\n    const url = 'https://api.cloudinary.com/v1_1/duyk43vpx/image/upload';\r\n    \r\n    fetch(url, {\r\n      method: \"post\",\r\n      body: data,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setAvatar(data.url.toString());\r\n        console.log(data.url.toString());\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n\r\n      });\r\n  } else {\r\n    toast({\r\n      title: \"Please Select an Image!\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    return;\r\n  }\r\n};\r\nconst submitHandler = async(e) => {\r\n  e.preventDefault()\r\n\r\n  await signup(email, password)\r\n}\r\n\r\n\r\n// submit sign up data to backend\r\n// const submitHandler = async(e) => {\r\n//   if ( !name || !email || !password  ||  !confirmPassword ) {\r\n//     toast({\r\n//       title: \"Ensure all required fields are filled out\",\r\n//       status: \"warning\",\r\n//       duration: 5000,\r\n//       isClosable: true,\r\n//       position: \"bottom\",\r\n//     });\r\n//     return;\r\n//   }\r\n//   if (password !== confirmPassword) {\r\n//     toast({\r\n//       title: \"Passwords don't match!\",\r\n//       status: \"warning\",\r\n//       duration: 5000,\r\n//       isClosable: true,\r\n//       position: \"bottom\",\r\n//     });\r\n//     return;\r\n//   }\r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         \"Content-type\": \"application/json\",\r\n//       },\r\n//     };\r\n//     const { data } = await axios.post(\r\n//       'api/user',\r\n//       { name, email, password, avatar },\r\n//       config\r\n//     );\r\n//     toast({\r\n//       title: \"Registration Successful!\",\r\n//       status: \"success\",\r\n//       duration: 5000,\r\n//       isClosable: true,\r\n//       position: \"bottom\",\r\n//     });\r\n//     localStorage.setItem('userInfo', JSON.stringify(data));\r\n// setName('');\r\n// setEmail('');\r\n// setConfirmPassword('');\r\n// setPassword('');\r\n// setAvatar('');\r\n//   }\r\n//   catch(error){\r\n// console.log(error);\r\n//   }\r\n//    }\r\nconsole.log('signup page running')\r\n  return (\r\n    <VStack spacing='5px'>\r\n      <FormControl id='first-name'>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n        placeholder='Enter your name...'\r\n        onChange={(e)=> setName(e.target.value)}\r\n        />\r\n        </FormControl>\r\n        <FormControl id='email'>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n        placeholder='Enter your email...'\r\n        onChange={(e)=> setEmail(e.target.value)}\r\n        />\r\n        </FormControl>\r\n        <FormControl>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup>\r\n        <Input\r\n        placeholder='Enter a password...'\r\n        type={show ? 'text' : 'password'}\r\n        onChange={(e)=> setPassword(e.target.value)}\r\n        />\r\n        <InputRightElement width='4.5rem'>\r\n        <Button h='1.75rem' size='sm'\r\n        onClick={()=> setShow(!show)}\r\n        >\r\n            {show ? 'Hide' : 'Show'}\r\n        </Button>\r\n        </InputRightElement>\r\n        </InputGroup>\r\n            </FormControl>\r\n            <FormControl>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup>\r\n        <Input\r\n        placeholder='Confirm password...'\r\n        type={show ? 'text' : 'password'}\r\n        onChange={(e)=> setConfirmPassword(e.target.value)}\r\n        />\r\n        <InputRightElement width='4.5rem'>\r\n        <Button h='1.75rem' size='sm'\r\n        onClick={()=> setShow(!show)}\r\n        >\r\n            {show ? 'Hide' : 'Show'}\r\n        </Button>\r\n        </InputRightElement>\r\n        </InputGroup>\r\n            </FormControl>\r\n            \r\n            <FormControl id='avatar'>\r\n        <FormLabel>Upload an Avatar</FormLabel>\r\n        <Input\r\n        id='choose-file'\r\n        type='file'\r\n        p={1.5}\r\n        accept='image/*'\r\n        onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n            </FormControl>\r\n            <Button \r\n            colorScheme='blue'\r\n            width='100%'\r\n            mt={15}\r\n            onClick={submitHandler}\r\n            isLoading={loading}\r\n        >Sign Up\r\n        </Button>\r\n    </VStack>\r\n  )\r\n}\r\n\r\nexport default Signup\r\n\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\authentication\\Login.js",["132","133","134"],"import { FormLabel, FormControl} from '@chakra-ui/form-control'\r\nimport { VStack } from '@chakra-ui/layout'\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\r\nimport { Button, useToast } from '@chakra-ui/react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nimport { useLogin } from '../../hooks/useLogin';\r\n\r\nconst Login = () => {\r\n  const [ show, setShow] = useState(false); \r\n  const [ email, setEmail] = useState(''); \r\n  const [ password, setPassword] = useState(''); \r\n\r\n  const {login, error, loading} = useLogin()\r\n\r\n  const toast = useToast(); \r\n  const history = useHistory(); \r\n\r\n\r\n\r\n  const submitHandler = async(e) => {\r\n    e.preventDefault()\r\n\r\n    await login(email, password)\r\n  }\r\n       // submit login data to backend\r\n// const submitHandler = async(e) => {\r\n// if (!email || !password ) {\r\n//   toast({\r\n//     title: \"Ensure all required fields are filled out\",\r\n//     status: \"warning\",\r\n//     duration: 5000,\r\n//     isClosable: true,\r\n//     position: \"bottom\",\r\n//   });\r\n//   return;\r\n// }\r\n\r\n// try {\r\n//   const config = {\r\n//     headers: {\r\n//       \"Content-type\": \"application/json\",\r\n//     },\r\n//   };\r\n//   const { data } = await axios.post(\r\n//     'api/user/login',\r\n//     { email, password },\r\n//     config\r\n//   );\r\n//   toast({\r\n//     title: \"Login Successful!\",\r\n//     status: \"success\",\r\n//     duration: 5000,\r\n//     isClosable: true,\r\n//     position: \"bottom\",\r\n//   });\r\n//   localStorage.setItem('userInfo', JSON.stringify(data));\r\n//   history.push('/chat');\r\n//   // location.href = 'api/chat';\r\n// }\r\n// catch(error){\r\n// console.log(error);\r\n// }\r\n//  }\r\nconsole.log('login page running')\r\n    return (\r\n      <VStack spacing='5px'>\r\n        <FormControl>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n        placeholder='Enter your email...'\r\n        onChange={(e)=> {setEmail(e.target.value)}}\r\n        value={email}\r\n        />\r\n        </FormControl>\r\n          <FormControl id='login-password '>\r\n          <FormLabel>Password</FormLabel>\r\n          <InputGroup>\r\n          <Input\r\n          placeholder='Enter a password...'\r\n          type={show ? 'text' : 'password'}\r\n          value={password}\r\n          onChange={(e)=> setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width='4.5rem'>\r\n          <Button h='1.75rem' size='sm'\r\n          onClick={()=> setShow(!show)}\r\n          >\r\n              {show ? 'Hide' : 'Show'}\r\n          </Button>\r\n          </InputRightElement>\r\n          </InputGroup>\r\n            </FormControl>\r\n              <Button \r\n              colorScheme='blue'\r\n              width='100%'\r\n              mt={15}\r\n              onClick={submitHandler}\r\n              isLoading={loading}\r\n          >Login\r\n          </Button>\r\n          <Button \r\n              colorScheme='red'\r\n              width='100%'\r\n              mt={15}\r\n              onClick={() => {\r\n                setEmail('johnnyGuest@gmail.com')\r\n                setPassword('howdy1234')\r\n                submitHandler();\r\n              }}\r\n              isLoading={loading}\r\n          >Use Guest Credentials\r\n          </Button>\r\n      </VStack>\r\n    )\r\n  }\r\n\r\n\r\nexport default Login\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ChatBox.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\SideDrawer.js",["135","136","137"],"import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useLogout } from '../../hooks/useLogout'\r\nimport { Button, Tooltip, Box, Text, Menu, MenuButton, Avatar, MenuList, MenuItem, MenuDivider, Drawer, useDisclosure, DrawerOverlay, DrawerContent, DrawerBody, Input, useToast, VStack, StackDivider, Spinner} from '@chakra-ui/react';\r\nimport { BellIcon, ChevronDownIcon } from '@chakra-ui/icons'\r\n import UserListItem from './UserListItem';\r\nimport { useAuthContext } from '../../hooks/useAuthContext';\r\nimport ChatLoading from './ChatLoading';\r\nimport ProfileModal from './ProfileModal';\r\nimport { useChatContext } from '../../hooks/useChatContext';\r\nconst SideDrawer = () => {\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState();\r\n  const {logout} = useLogout(); \r\n  const history = useHistory(); \r\n  const {user} = useAuthContext(); \r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const {\r\n    setSelectedChat,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = useChatContext();\r\n\r\n  const handleClick = () => {\r\n    logout();\r\n    history.push('/');\r\n  }\r\n\r\n  const accessChat = async (userId) => {\r\n    setLoadingChat(true)\r\n    // format param for JSON stringify\r\n    let param = {userId: userId};\r\n      try {\r\n        const response = await fetch(`/api/chat`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': `Bearer ${user.token}`,\r\n          },\r\n          body: JSON.stringify(param)\r\n        }) \r\n        const json = await response.json(); \r\n\r\n        if (!chats.find((c) => c._id === json._id)) setChats(prevChats => ([json, ...prevChats]))\r\n        \r\n     \r\n        setSelectedChat(json)\r\n        setLoadingChat(false)\r\n        // close side drawer\r\n        onClose()\r\n              }\r\n    \r\n    catch (error) {\r\n      console.log(error)\r\n    }\r\n    console.log('accessChat triggered')\r\n  }\r\n\r\n  const toast = useToast(); \r\n\r\n  const handleSearch = async(e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\nif (!search){\r\n  toast({\r\n        title: \"Nothing in Search!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n      try {\r\nconst response = await fetch(`/api/user?search=${search}`, {\r\n  method: 'GET',\r\n  headers: {\r\n    'Authorization': `Bearer ${user.token}`\r\n  }\r\n})\r\n\r\nconst json = await response.json(); \r\n\r\n// if(response.ok){\r\n//   disp\r\n// }\r\nsetLoading(false)\r\nsetSearchResult(json); \r\nsetSearch('')\r\nconsole.log(json)\r\n\r\n      }\r\ncatch(error) {\r\nconsole.log(error)\r\n}\r\n\r\n  }\r\n\r\n  return (\r\n <>\r\n  <Box\r\n  display='flex'\r\n  justifyContent='space-between'\r\n  alignItems='center'\r\n  bg='white'\r\n  w='100%'\r\n  p='5px 10px'\r\n  borderWidth='5px'>\r\n    <Tooltip label=\"Search for users to chat with\" \r\n    hasArrow\r\n    placement='bottom-end'>\r\n    <Button variant='ghost' onClick={onOpen}> 🔎 \r\n    <Text d={{base: 'none', md: 'flex'}} px='4'>\r\n      Search Users\r\n    </Text>\r\n    </Button>\r\n      </Tooltip>\r\n      <Text fontSize='2x1' fontFamily='Work sans'>\r\n      Holla-Back\r\n      </Text>\r\n      <div>\r\n      <Menu>\r\n          <MenuButton p={1}>\r\n            <BellIcon fontSize='2x1' m={1} />\r\n          </MenuButton>\r\n        </Menu>\r\n        <Menu>\r\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon/>} bgColor='transparent'>\r\n            <Avatar size='sm' \r\n            cursor='pointer' \r\n            name={user.name} \r\n            src={user.avatar}/>\r\n          </MenuButton>\r\n          <MenuList>\r\n          <ProfileModal user={user}>\r\n            </ProfileModal>\r\n            <MenuDivider />\r\n            <MenuItem onClick={handleClick}>Logout</MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      </div>\r\n  </Box>\r\n  <Drawer placement='left' onClose={onClose} isOpen={isOpen}>\r\n  <DrawerOverlay/>\r\n    <DrawerContent>\r\n    <DrawerBody>\r\n      <Box d='flex' pb={2}>\r\n        <Input\r\n          placeholder='Search by name or email'\r\n          mr={2}\r\n          value={search}\r\n          onChange={(e)=>setSearch(e.target.value)}\r\n        />\r\n        <Button \r\n        onClick={handleSearch}\r\n        >\r\n        Go\r\n        </Button>\r\n      </Box>\r\n      {loading ? (\r\n        <ChatLoading/> \r\n      ) : (\r\n  <VStack\r\n  // divider={<StackDivider borderColor='gray.200' />}\r\n\r\n  spacing={2}\r\n  align='stretch'\r\n>\r\n       {searchResult?.map(user => (\r\n        <UserListItem\r\n          key={user._id}\r\n          name={user.name}\r\n          email={user.email}\r\n          avatar={user.avatar}\r\n          handleFunction={() => accessChat(user._id)}\r\n        />\r\n       ))}\r\n       </VStack>\r\n      )\r\n      }\r\n      {loadingChat && <><h4>generating chat...</h4><Spinner ml='auto' d='flex'/></>}\r\n    </DrawerBody>\r\n    </DrawerContent>\r\n  </Drawer>\r\n </>\r\n  )\r\n}\r\n\r\nexport default SideDrawer\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\MyChats.js",["138","139","140","141"],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useSignup.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\SingleChat.js",["142","143"],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useLogin.js",["144","145","146","147","148","149"],"import { useState } from \"react\";\r\nimport { useAuthContext } from \"./useAuthContext\";\r\n\r\nexport const useLogin = () => {\r\n    const [ show, setShow] = useState(false); \r\n    const [ email, setEmail] = useState(''); \r\n    const [ error, setError] = useState(''); \r\n    const [ password, setPassword] = useState(''); \r\n    const [loading, setLoading] = useState(false);\r\n    const { dispatch } = useAuthContext()\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true)\r\n\r\n        // compare supplied credentials with DB\r\n        const response = await fetch('/api/user/login', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({ email, password })\r\n          })\r\n        const json = await response.json()\r\n\r\n        if (!response.ok) {\r\n            setLoading(false)\r\n            setError(json.error); \r\n        }\r\n\r\n        if (response.ok) {\r\n            localStorage.setItem('userInfo', JSON.stringify(json))\r\n\r\n            // update auth context\r\n            dispatch({type: 'LOGIN', payload: json})\r\n            setLoading(false)\r\n\r\n        }\r\n    }\r\n    return { login, loading, error }\r\n}\r\n  ","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useChatContext.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ChatLoading.js",["150","151"],"\r\n\r\nimport React from 'react'\r\nimport { Skeleton, SkeletonCircle, SkeletonText, Stack } from '@chakra-ui/react'\r\nconst ChatLoading = () => {\r\n  return (\r\n    <div>\r\n      <Stack>\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n  <Skeleton height='45px' />\r\n</Stack>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatLoading\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\hooks\\useLogout.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UserListItem.js",["152","153","154","155"],"import React from 'react'\r\nimport { Skeleton, SkeletonCircle, SkeletonText, Stack, Box, Avatar, Text } from '@chakra-ui/react'\r\n\r\nconst UserListItem = ({ name, email, avatar, handleFunction }) => {\r\n  return (\r\n    <Box\r\n    onClick={handleFunction}\r\n    cursor=\"pointer\"\r\n    bg=\"#E8E8E8\"\r\n    _hover={{\r\n      background: \"#38B2AC\",\r\n      color: \"white\",\r\n    }}\r\n    w=\"100%\"\r\n    d=\"flex\"\r\n    alignItems=\"center\"\r\n    color=\"black\"\r\n    px={5}\r\n    py={2}\r\n    mt={2}\r\n    borderRadius=\"lg\"\r\n  >\r\n    <Avatar\r\n      mr={2}\r\n      size=\"md\"\r\n      cursor=\"pointer\"\r\n      name={name}\r\n      src={avatar}\r\n    />\r\n    <Box \r\n    d='flex'\r\n    flexDir='column'\r\n    alignItems='flex-start'\r\n    justifyContent='space-between'\r\n    >\r\n      <Text>\r\n      {name}\r\n      </Text>\r\n      <Text fontSize=\"xs\">\r\n        <b>{email}</b>\r\n      </Text>\r\n    </Box>\r\n  </Box>\r\n  )\r\n}\r\n\r\nexport default UserListItem\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ProfileModal.js",["156"],"import React, { useState } from 'react'\r\nimport { IconButton, useDisclosure, Image, Text } from '@chakra-ui/react'\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button\r\n  } from '@chakra-ui/react'\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n        ) : (\r\n            <IconButton\r\n              d={{ base: 'flex' }}\r\n              icon={<ViewIcon/>}\r\n              onClick={onOpen}\r\n            />\r\n        )}\r\n        <Modal size='lg' isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n          fontSize='40px'\r\n          fontFamily='Work sans'\r\n          d='flex'\r\n          justifyContent='center'\r\n          >\r\n         {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n          d='flex'\r\n          flexDir='column'\r\n          alignItems='center'\r\n          justifyContent='space-between'\r\n          >\r\n            <Image\r\n            borderRadius='full'\r\n            boxSize='150px'\r\n            src={user.avatar}\r\n            alt={user.name}\r\n            />\r\n            <Text\r\n            fontSize={{ base: '28px', md: '30px' }}\r\n            fontFamily='Work sans'\r\n            >\r\n                Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileModal\r\n","C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\GroupChatModal.js",["157","158","159","160","161"],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\config\\ChatLogic.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UserBadgeItem.js",[],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\UpdateGroupChatModal.js",["162"],"C:\\Users\\Adam\\repos\\codeschool\\projects\\udemy\\react\\holla-back\\client\\src\\components\\misc\\ScrollableChat.js",[],{"ruleId":"163","severity":1,"message":"164","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":16},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"163","severity":1,"message":"171","line":1,"column":44,"nodeType":"165","messageId":"166","endLine":1,"endColumn":53},{"ruleId":"163","severity":1,"message":"172","line":11,"column":9,"nodeType":"165","messageId":"166","endLine":11,"endColumn":16},{"ruleId":"163","severity":1,"message":"171","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"163","severity":1,"message":"173","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"174","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":19},{"ruleId":"163","severity":1,"message":"175","line":6,"column":26,"nodeType":"165","messageId":"166","endLine":6,"endColumn":30},{"ruleId":"163","severity":1,"message":"176","line":6,"column":32,"nodeType":"165","messageId":"166","endLine":6,"endColumn":36},{"ruleId":"163","severity":1,"message":"177","line":6,"column":38,"nodeType":"165","messageId":"166","endLine":6,"endColumn":45},{"ruleId":"163","severity":1,"message":"178","line":6,"column":47,"nodeType":"165","messageId":"166","endLine":6,"endColumn":56},{"ruleId":"163","severity":1,"message":"179","line":6,"column":58,"nodeType":"165","messageId":"166","endLine":6,"endColumn":61},{"ruleId":"163","severity":1,"message":"180","line":6,"column":63,"nodeType":"165","messageId":"166","endLine":6,"endColumn":71},{"ruleId":"163","severity":1,"message":"173","line":5,"column":8,"nodeType":"165","messageId":"166","endLine":5,"endColumn":13},{"ruleId":"163","severity":1,"message":"181","line":11,"column":9,"nodeType":"165","messageId":"166","endLine":11,"endColumn":13},{"ruleId":"163","severity":1,"message":"182","line":13,"column":9,"nodeType":"165","messageId":"166","endLine":13,"endColumn":24},{"ruleId":"163","severity":1,"message":"183","line":15,"column":9,"nodeType":"165","messageId":"166","endLine":15,"endColumn":15},{"ruleId":"163","severity":1,"message":"184","line":16,"column":16,"nodeType":"165","messageId":"166","endLine":16,"endColumn":21},{"ruleId":"163","severity":1,"message":"184","line":14,"column":17,"nodeType":"165","messageId":"166","endLine":14,"endColumn":22},{"ruleId":"163","severity":1,"message":"185","line":16,"column":9,"nodeType":"165","messageId":"166","endLine":16,"endColumn":14},{"ruleId":"163","severity":1,"message":"172","line":17,"column":9,"nodeType":"165","messageId":"166","endLine":17,"endColumn":16},{"ruleId":"163","severity":1,"message":"186","line":4,"column":187,"nodeType":"165","messageId":"166","endLine":4,"endColumn":199},{"ruleId":"163","severity":1,"message":"187","line":22,"column":5,"nodeType":"165","messageId":"166","endLine":22,"endColumn":17},{"ruleId":"163","severity":1,"message":"188","line":23,"column":5,"nodeType":"165","messageId":"166","endLine":23,"endColumn":20},{"ruleId":"163","severity":1,"message":"189","line":3,"column":10,"nodeType":"165","messageId":"166","endLine":3,"endColumn":19},{"ruleId":"163","severity":1,"message":"190","line":13,"column":10,"nodeType":"165","messageId":"166","endLine":13,"endColumn":21},{"ruleId":"191","severity":1,"message":"192","line":50,"column":6,"nodeType":"193","endLine":50,"endColumn":18,"suggestions":"194"},{"ruleId":"163","severity":1,"message":"185","line":53,"column":9,"nodeType":"165","messageId":"166","endLine":53,"endColumn":14},{"ruleId":"163","severity":1,"message":"195","line":21,"column":11,"nodeType":"165","messageId":"166","endLine":21,"endColumn":23},{"ruleId":"191","severity":1,"message":"196","line":87,"column":8,"nodeType":"193","endLine":87,"endColumn":22,"suggestions":"197"},{"ruleId":"163","severity":1,"message":"198","line":5,"column":13,"nodeType":"165","messageId":"166","endLine":5,"endColumn":17},{"ruleId":"163","severity":1,"message":"199","line":5,"column":19,"nodeType":"165","messageId":"166","endLine":5,"endColumn":26},{"ruleId":"163","severity":1,"message":"200","line":6,"column":13,"nodeType":"165","messageId":"166","endLine":6,"endColumn":18},{"ruleId":"163","severity":1,"message":"201","line":6,"column":20,"nodeType":"165","messageId":"166","endLine":6,"endColumn":28},{"ruleId":"163","severity":1,"message":"202","line":8,"column":13,"nodeType":"165","messageId":"166","endLine":8,"endColumn":21},{"ruleId":"163","severity":1,"message":"203","line":8,"column":23,"nodeType":"165","messageId":"166","endLine":8,"endColumn":34},{"ruleId":"163","severity":1,"message":"204","line":4,"column":20,"nodeType":"165","messageId":"166","endLine":4,"endColumn":34},{"ruleId":"163","severity":1,"message":"205","line":4,"column":36,"nodeType":"165","messageId":"166","endLine":4,"endColumn":48},{"ruleId":"163","severity":1,"message":"206","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":18},{"ruleId":"163","severity":1,"message":"204","line":2,"column":20,"nodeType":"165","messageId":"166","endLine":2,"endColumn":34},{"ruleId":"163","severity":1,"message":"205","line":2,"column":36,"nodeType":"165","messageId":"166","endLine":2,"endColumn":48},{"ruleId":"163","severity":1,"message":"207","line":2,"column":50,"nodeType":"165","messageId":"166","endLine":2,"endColumn":55},{"ruleId":"163","severity":1,"message":"208","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"163","severity":1,"message":"209","line":17,"column":18,"nodeType":"165","messageId":"166","endLine":17,"endColumn":24},{"ruleId":"163","severity":1,"message":"210","line":20,"column":10,"nodeType":"165","messageId":"166","endLine":20,"endColumn":21},{"ruleId":"163","severity":1,"message":"211","line":34,"column":13,"nodeType":"165","messageId":"166","endLine":34,"endColumn":25},{"ruleId":"163","severity":1,"message":"212","line":34,"column":27,"nodeType":"165","messageId":"166","endLine":34,"endColumn":42},{"ruleId":"163","severity":1,"message":"213","line":34,"column":44,"nodeType":"165","messageId":"166","endLine":34,"endColumn":49},{"ruleId":"163","severity":1,"message":"214","line":37,"column":11,"nodeType":"165","messageId":"166","endLine":37,"endColumn":26},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-native-reassign",["215"],"no-negated-in-lhs",["216"],"'useEffect' is defined but never used.","'history' is assigned a value but never used.","'axios' is defined but never used.","'Container' is defined but never used.","'Text' is defined but never used.","'Tabs' is defined but never used.","'TabList' is defined but never used.","'TabPanels' is defined but never used.","'Tab' is defined but never used.","'TabPanel' is defined but never used.","'name' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'avatar' is assigned a value but never used.","'error' is assigned a value but never used.","'toast' is assigned a value but never used.","'StackDivider' is defined but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","'ChatState' is defined but never used.","'loadingChat' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["217"],"'getOtherUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllMessages'. Either include it or remove the dependency array.",["218"],"'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'SkeletonCircle' is defined but never used.","'SkeletonText' is defined but never used.","'Skeleton' is defined but never used.","'Stack' is defined but never used.","'useState' is defined but never used.","'uuidv4' is defined but never used.","'Search2Icon' is defined but never used.","'selectedChat' is assigned a value but never used.","'setSelectedChat' is assigned a value but never used.","'chats' is assigned a value but never used.","'removeGroupUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [fetchChats, fetchagain]",{"range":"223","text":"224"},"Update the dependencies array to be: [getAllMessages, selectedChat]",{"range":"225","text":"226"},[1765,1777],"[fetchChats, fetchagain]",[2879,2893],"[getAllMessages, selectedChat]"]